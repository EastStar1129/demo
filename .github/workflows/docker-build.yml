name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build all modules
        run: ./gradlew build -Dspring.profiles.active=production

      - name: Test all modules
        run: ./gradlew test -Dspring.profiles.active=production

      - name: Prepare admin build context
        run: mkdir -p admin/build/libs && cp admin/build/libs/*.jar admin/

      - name: Prepare client build context
        run: mkdir -p client/build/libs && cp client/build/libs/*.jar client/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            admin/build/libs/*.jar
            client/build/libs/*.jar

  docker-build:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create directories for artifacts
        run: |
          mkdir -p admin/build/libs
          mkdir -p client/build/libs

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build admin image
        run: |
          docker build -t admin:latest ./admin
          docker images

      - name: Build client image
        run: |
          docker build -t client:latest ./client
          docker images

      - name: Save admin image to file
        run: docker save -o admin_image.tar admin:latest

      - name: Save client image to file
        run: docker save -o client_image.tar client:latest

      - name: Upload docker images
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            admin_image.tar
            client_image.tar

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SYNOLOGY_HOST }} >> ~/.ssh/known_hosts

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Download docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: .

      - name: Copy images and configuration to Synology NAS using SCP
        run: |
          scp -o UserKnownHostsFile=~/.ssh/known_hosts -P 22 admin_image.tar ${{ secrets.SYNOLOGY_USERNAME }}@${{ secrets.SYNOLOGY_HOST }}:${{ secrets.DEPLOY_PATH }}
          scp -o UserKnownHostsFile=~/.ssh/known_hosts -P 22 client_image.tar ${{ secrets.SYNOLOGY_USERNAME }}@${{ secrets.SYNOLOGY_HOST }}:${{ secrets.DEPLOY_PATH }}
          scp -o UserKnownHostsFile=~/.ssh/known_hosts -P 22 docker-compose.yml ${{ secrets.SYNOLOGY_USERNAME }}@${{ secrets.SYNOLOGY_HOST }}:${{ secrets.DEPLOY_PATH }}

      - name: Deploy containers on Synology NAS using SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          username: ${{ secrets.SYNOLOGY_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            export PATH=$PATH:/usr/local/bin:/usr/bin
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker load -i ${{ secrets.DEPLOY_PATH }}/admin_image.tar
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker load -i ${{ secrets.DEPLOY_PATH }}/client_image.tar
            cd ${{ secrets.DEPLOY_PATH }}
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S /usr/local/bin/docker-compose up -d
          env:
            DB_IP: ${{ secrets.DB_IP }}
            DB_NAME: ${{ secrets.DB_NAME }}
            DB_USERNAME: ${{ secrets.DB_USERNAME }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          timeout: 300s
          debug: true
